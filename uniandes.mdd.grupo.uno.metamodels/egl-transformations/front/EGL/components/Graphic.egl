import { Component, OnInit, ViewChild, ElementRef } from "@angular/core";
import Chart from "chart.js";

  [% // code start
  	"Chart -> ".print();
 	element.name.toLowerCase().println();
 %]
 	
@Component({
  selector: "app-[%=element.name.toLowerCase()%]",
  template: `<canvas #chartRef style="width: 100%;"></canvas>`,
  //styleUrls: ["./[%=element.name.toLowerCase()%].component.scss"],
})

export class [%=element.name%]Component implements OnInit, OnDestroy {
  /* Manejo de Usuario */
  public user: any = {};

  /* Titulo en HTML */
  public titulo = "[%=element.name%]";

  /* Indica el estado de carga */
  public cargando: boolean = false;

  /* API Routes */
  readonly API_ALL: string = "api/[%=element.name.toLowerCase()%]";

  /* Observables - Async */
  public allObervable: Observable<any>;

  /* Manejo de subscripcion para evitar Memory Leaks */
  // disclamer: HTTP Request manejan su propio unsubscribe por lo que no generan leaks.
  public subscriptions: Subscription[] = [];

  /* Atributos del grafico */
  public chart: any;
  public data: {};
  public options: any;
  
  /* Objeto creado a partir de un Form */
  public objetoCreado: any = {};

  /* Referencia al chart en HTML */
  @ViewChild("chartRef", { static: true }) chartRef: ElementRef;

  /* Dialog que se encuentra abierto */
  public dialogActivo: any;
  
  constructor(
    private authService: AuthService,
    private mainService: MainService,
    private toastrService: NbToastrService,
    private dialogService: NbDialogService,
    private router: Router
  ) { }

  ngOnInit() {
    this.user = this.authService.user;

    if (this.isAdmin()) {
      this.getAll();
    }
    this.generateData();
    this.generateChart();
  }

  ngOnDestroy() {
    this.subscriptions.forEach(subs => subs.unsubscribe());
  }

  // =================================
  // Metodos
  // ================================

  /**
   * Verifica si el usuario en sesi�n tiene
   * permisos de administrador
   * @returns {boolean}
   */
  public isAdmin(): boolean {
    return true;
  }

  /**
   * Organiza por fecha de creadcion en el servidor
   * @param a primer objeto
   * @param b segundo objeto
   */
  private sortCreatedAt(a, b): number {
    const dateA: Date = a ? new Date(a.createdAt) : new Date();
    const dateB: Date = b ? new Date(b.createdAt) : new Date();
    return dateB.getTime() - dateA.getTime();
  }

  // =================================
  // Metodos Handlers
  // ================================

  /**
   * De abrir el dialog que le permite al usuario
   * registar un nuevo objeto
   * @returns void
   */
  public handleModalAgregar(): void {
    this.showDialog({ dialog: this.dialogAgregar });
  }

  /**
   * Muestra un mensaje cuando el servidor responde NULL
   */
  private handleResponseNull(): void {
    this.showToastr({
      title: "No se ha establecido una conexi�n con el servidor.",
      status: "basic",
    });
  }

  /**
   * Muestra un mensaje con el error
   * @param {any} error generado por el request
   */
  private handleError({ error }: { error: any }): void {
    this.showToastr({
      title: "Se han encontrado errores.",
      status: "warning",
      message: error.message || error || "not found",
    });
  }

  /**
   * Muestra un mensaje de success
   * @param {string} title del mensaje
   */
  private handleSuccess({ title }: { title: string }): void {
    this.showToastr({
      title: `${title}`,
      status: "success",
    });
  }

  // =================================
  // Metodos CRUD
  // ================================

  /**
   * Obtiene los objeto del servidor
   * @returns void
   */
  private getAll(): void {
    this.cargando = true;

    this.allObervable = this.mainService.get({
      api: this.API_ALL,
    });

    const subs = this.allObervable.subscribe(
      response => {
        if (response) {
          if (response.errors) {
            this.handleError({ error: response.errors });
          } else {
            const objetos = response as any[];
            [%
            	
            	// aqui es el SOURCE de la Tabla Smart
            
            %]
            this.source.load(objetos.sort(this.sortCreatedAt));
          }
        } else {
          this.handleResponseNull();
          this.source.load([]);
        }
      },
      error => {
        this.handleError({ error });
        this.cargando = false;
        this.source.load([]);
      },
      () => {
        this.cargando = false;
      }
    );

    this.subscriptions.push(subs);
  }

 //Construye el grafico a partir de un camvas que se establece en el HTML
  private generateChart(): void {
    const graph = this.chartRef.nativeElement.getContext("2d");
    [%
      var tipo: String = "";
      
      if (element.isKindOf(cp!LineChart)){
      	tipo = "line";
      }// end-if line
      if (element.isKindOf(cp!BarChart)){
      	tipo = "bar";
      }// end-if bar
      if (element.isKindOf(cp!RadarChart)){
      	tipo = "radar";      
      }// end-if radar
      if (element.isKindOf(cp!PieChart)){
      	tipo = "pie";
      }// end-if pie
      %]
    this.chart = new Chart(graph, {
      type: "[%=tipo%]",
      data: this.data,
      [% 
      if (element.isKindOf(cp!Graphic2D)){
      %]
      options: this.chartOptionsGraphic2D(),
      [% 
      }// end-if graphics2D
	  if (element.isKindOf(cp!RadarChart)){
      %]
      options: this.chartOptionsRadar(),
      [% 
      }// end-if radar
	  if (element.isKindOf(cp!PieChart)){
      %]
      options: this.chartOptionsPie(),
      [% 
      }// end-if pie	
      %]
    });
  }
  
 // Actualiza la informacion de la chart se le asignan nuevos labels globalmente se mantienen los datasets que se mostraran
  private updateChartData(): void {
    // asignacion de nuevos valores - falta
    this.chart.update();
  }
  
[%
if (element.isKindOf(cp!Graphic2D)){
%]
// Configuracion del chart graphics 2d
  private chartOptionsGraphic2D(): {
    return {
      responsive: true,
      maintainAspectRatio: false,
      legend: {
        position: "[%=element.legendPosition%]",
        labels: {
          fontColor: "#2d3436",
        },
      },
      hover: {
        mode: "index",
      },
      scales: {
        xAxes: [
          {
        [%
           if (element.isKindOf(cp!BarChart)){
     	%]
            barPercentage: [%=element.barPercentage%],
        [%
        	}// end-if barchart
        %]    
            display: true,
            scaleLabel: {
              display: true,
              labelString: "[%=element.labelStringXAxes%]",
            },
            gridLines: {
              display: [%=element.displayGridLinesXAxes%],
              color: "[%=element.colorGridLinesXAxes%]",
            },
            ticks: {
              fontColor: "#2d3436",
            },
          },
        ],
        yAxes: [
          {
            display: true,
            scaleLabel: {
              display: true,
              labelString: "[%=element.labelStringYAxes%]",
            },
            gridLines: {
              display: [%=element.displayGridLinesYAxes%],
              color: "[%=element.colorGridLinesYAxes%]",
            },
            ticks: {
              fontColor: "#2d3436",
            },
          },
        ],
      },
    };
  }
[%
} //end-if graphics2d 
%]

[%
if (element.isKindOf(cp!RadarChart)){
%]
// Configuracion del chart radar
  private chartOptionsRadar(): {} {
    return  {
    	responsive: true,
        legend: {
        	position: "[%=element.legendPosition%]",
        	labels: {
          		fontColor: "#2d3436",
        	},
      	},
    	scale: {
        	angleLines: {
            	display: [%=element.angleLinesDisplay%]
        	},
        	ticks: {
            	suggestedMin: 50,
            	suggestedMax: 100
        	}
       	}
    };
  }
[%
} //end-if radar 
%]
 
[%
if (element.isKindOf(cp!PieChart)){
%]
// Configuracion del chart pie
  private chartOptionsPie(): {} {
    return{
    	responsive: true,
        legend: {
        	position: "[%=element.legendPosition%]",
        	labels: {
          		fontColor: "#2d3436",
        	},
      	},
    }; 
  }
[%
} //end-if pie 
%]

// Generar data para el chart
  private generateData(): void {
    this.data = {
    [%
      	var cadenaLabels:String;
      	var cont:Integer=1;
      	var total:Integer=element.labels.size();
      	// arma un string con todos los labels asociado al graphic
      	for ( label in element.labels ) {
			cadenaLabels = cadenaLabels + '"' + label.name + '"';
      	    if (cont <> total){
     	    	cadenaLabels = cadenaLabels + ", "; 
      	    }//end-if contador
      	    cont++;
      	}// end-for labels
      %]
      labels: [[%=cadenaLabels%]],
      datasets: [
        [% 
        for ( dat in element.data ) {
        %]
        {
          label: "[%=dat.category%]",
          data: [
          [%
          var i:Integer=1;
          while (i <= total ) {
          // falta sacar los datos de la BD
          %]
            this.random(),
          [%
          	i = i+1;
          }  // end-while contador datos
          %]
          ],
          borderColor: "[%=dat.borderColor%]",
          backgroundColor: "[%=dat.backgroundColor%]",
          fill: [%=dat.fill%],
          borderDash: [[%=dat.borderDash%], [%=dat.borderDash%]],
          pointRadius: 8,
          pointHoverRadius: 10,
        },
        [% 
        }  // end-for data
        %]
      ]; 
    };
  }  
  
  // =================================
  // Metodos Genericos
  // ================================
 
 
  /**
   * Filtra la Samrt Table de modo que solo se muestren las entradas
   * que contienen los caracteres buscados
   * @param  {string=""} query cadena de caracteres a buscar
   * @returns void
   */
  public onSearch({ query }: { query: string }): void {
    if (!query) this.source.reset();
    else {
      this.source.setFilter(
        [
          {
            field: "nombre",
            search: query,
          },
        ],
        false
      );
    }
  }

  /**
   * Muestra una notificacion estilo Toastr en la pantalla actual
   * @param  {string} position determina en que parte de la pantalla se representar� el Toastr
   * @param  {any} title titulo del Toastr
   * @param  {any} message contenido del Toastr
   * @param  {any} status puede ser (basic, primary, success, info, warning, danger, control)
   * @returns void
   */
  private showToastr({
    position,
    title,
    message,
    status,
  }: {
    position?: any;
    title: string;
    message?: string;
    status: any;
  }): void {
    let realPosition = position ? position : "top-end";
    let realMessage = message ? message : "";
    let duractionMilisec = 4500;
    this.toastrService.show(`${realMessage}`, `${title}`, {
      position: realPosition,
      status,
      duration: duractionMilisec,
    });
  }

  /**
   * Se encarga de navegar a la URL especificada
   * @param {string} path -> "/dashboard/inventario/:id"
   * @return void
   */
  public routerNavigateTo({ path }: { path: string }): void {
    this.router.navigate([path]).then(fulfilled => {
      if (!fulfilled) {
        this.showToastr({
          title: "Direcci�n URL no v�lida.",
          status: "basic",
        });
      }
    });
  }

  /**
   * Abre un dialogo estilo nebular
   * @param  {any} dialog referencia al template en html
   * que contiene el dialogo. Deber�a der tipye ElementRef o TypeReference
   * @returns void
   */
  public showDialog({ dialog }: { dialog: any }): void {
    this.dialogActivo = this.dialogService.open(dialog, { context: "" });
  }
}